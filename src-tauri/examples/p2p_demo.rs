use mycelium_app_lib::p2p::RealP2PNode;
use tokio::time::{sleep, Duration};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    env_logger::init();
    
    println!("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–π P2P —Å–µ—Ç–∏ Mycelium");
    println!("üì° –ü—Ä–æ—Ç–æ–∫–æ–ª '–ì–µ–Ω–µ–∑–∏—Å' - –≠—Ç–∞–ø 1: –°–ø–∏–Ω–Ω–æ–π –º–æ–∑–≥");
    println!();

    // –°–æ–∑–¥–∞–µ–º P2P –Ω–æ–¥—É
    let (mut node, mut event_receiver) = RealP2PNode::new().await?;
    
    println!("‚úÖ –ù–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
    println!("üÜî –í–∞—à Peer ID: {}", node.local_peer_id);
    println!();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–¥—É
    node.start().await?;
    println!("‚úÖ –ù–æ–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ —Å–ª—É—à–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
    println!("üîç –ò—â–µ–º –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏...");
    println!();

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    let event_handle = tokio::spawn(async move {
        while let Some(event) = event_receiver.recv().await {
            match event {
                mycelium_app_lib::p2p::P2PEvent::StatusUpdate { status_text } => {
                    println!("üì¢ {}", status_text);
                }
                mycelium_app_lib::p2p::P2PEvent::NetworkStatusUpdate { status } => {
                    println!("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏:");
                    println!("   üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {}", status.total_peers);
                    println!("   üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: {}", status.connected_peers);
                    println!("   üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {}", status.discovered_peers);
                    println!();
                }
                _ => {}
            }
        }
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    let run_handle = tokio::spawn(async move {
        if let Err(e) = node.run_event_loop().await {
            eprintln!("‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π: {}", e);
        }
    });

    // –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    println!("‚è≥ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 30 —Å–µ–∫—É–Ω–¥...");
    println!("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∫–æ–ø–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ –¥—Ä—É–≥–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ –≤ —Ç–æ–π –∂–µ —Å–µ—Ç–∏");
    println!("   —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!");
    println!();

    sleep(Duration::from_secs(30)).await;

    println!("üèÅ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
    println!("‚úÖ –†–µ–∞–ª—å–Ω–∞—è P2P —Å–µ—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç!");
    println!("üéâ –ü—Ä–æ—Ç–æ–∫–æ–ª '–ì–µ–Ω–µ–∑–∏—Å' - –≠—Ç–∞–ø 1 —É—Å–ø–µ—à–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω!");

    Ok(())
} 