name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-release:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install dependencies (Ubuntu)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libgtk-3-dev \
            libgtk-4-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            pkg-config \
            libjavascriptcoregtk-4.1-dev \
            libglib2.0-dev \
            libsoup-3.0-dev \
            libwebkit2gtk-4.1-dev

      - name: Set PKG_CONFIG_PATH (Ubuntu)
        if: matrix.platform.os == 'ubuntu-latest'
        run: echo "PKG_CONFIG_PATH=/usr/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install dependencies (Windows)
        if: matrix.platform.os == 'windows-latest'
        run: |
          curl -L -o MicrosoftEdgeWebview2Setup.exe https://go.microsoft.com/fwlink/p/?LinkId=2124703
          ./MicrosoftEdgeWebview2Setup.exe /silent /install

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Install frontend dependencies
        run: npm install

      - name: Build with Tauri
        run: npm run tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.platform.os }}
          path: src-tauri/target/release/
          if-no-files-found: error
          retention-days: 1

  create-release:
    needs: build-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        run: |
          # Create release
          gh release create ${{ github.ref_name }} \
            --title "Release ${{ github.ref_name }}" \
            --notes "Release ${{ github.ref_name }}" \
            --draft=false \
            --prerelease=false \
            --generate-notes=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Assets with Retry
        run: |
          # Function to upload with retry
          upload_with_retry() {
            local file="$1"
            local max_attempts=5
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts to upload $file"
              
              if gh release upload ${{ github.ref_name }} "$file" --clobber; then
                echo "Successfully uploaded $file"
                return 0
              else
                echo "Failed to upload $file (attempt $attempt)"
                if [ $attempt -lt $max_attempts ]; then
                  echo "Waiting 10 seconds before retry..."
                  sleep 10
                fi
                attempt=$((attempt + 1))
              fi
            done
            
            echo "Failed to upload $file after $max_attempts attempts"
            return 1
          }
          
          # Upload all files with retry
          find artifacts -type f -name "*.exe" -o -name "*.dmg" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" | while read file; do
            upload_with_retry "$file"
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

