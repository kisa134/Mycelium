name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-release:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install dependencies (Ubuntu)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libgtk-3-dev \
            libgtk-4-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            pkg-config \
            libjavascriptcoregtk-4.1-dev \
            libglib2.0-dev \
            libsoup-3.0-dev \
            libwebkit2gtk-4.1-dev

      - name: Set PKG_CONFIG_PATH (Ubuntu)
        if: matrix.platform.os == 'ubuntu-latest'
        run: echo "PKG_CONFIG_PATH=/usr/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install dependencies (Windows)
        if: matrix.platform.os == 'windows-latest'
        run: |
          curl -L -o MicrosoftEdgeWebview2Setup.exe https://go.microsoft.com/fwlink/p/?LinkId=2124703
          ./MicrosoftEdgeWebview2Setup.exe /silent /install

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Install frontend dependencies
        run: npm install

      - name: Build with Tauri
        run: npm run tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.platform.os }}
          path: src-tauri/target/release/
          if-no-files-found: error
          retention-days: 1

      - name: Find and upload release files
        run: |
          # Find the main executable file
          if [[ "${{ matrix.platform.os }}" == "windows-latest" ]]; then
            RELEASE_FILE=$(find src-tauri/target/release -name "*.exe" -type f | head -1)
          elif [[ "${{ matrix.platform.os }}" == "macos-latest" ]]; then
            RELEASE_FILE=$(find src-tauri/target/release -name "*.dmg" -type f | head -1)
          else
            RELEASE_FILE=$(find src-tauri/target/release -name "*.AppImage" -type f | head -1)
            if [[ -z "$RELEASE_FILE" ]]; then
              RELEASE_FILE=$(find src-tauri/target/release -name "*.deb" -type f | head -1)
            fi
          fi
          
          if [[ -n "$RELEASE_FILE" ]]; then
            echo "RELEASE_FILE=$RELEASE_FILE" >> $GITHUB_ENV
            echo "Found release file: $RELEASE_FILE"
          else
            echo "No release file found!"
            exit 1
          fi

  create-release:
    needs: build-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Release ${{ github.ref_name }}
            
            ## What's Changed
            - Bug fixes and improvements
            - Updated dependencies
          draft: false
          prerelease: false

      - name: Upload Windows Asset with Retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_on: error
          command: |
            gh release upload ${{ github.ref_name }} artifacts/release-windows-latest/*.exe \
              --clobber \
              --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS Asset with Retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_on: error
          command: |
            gh release upload ${{ github.ref_name }} artifacts/release-macos-latest/*.dmg \
              --clobber \
              --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux Asset with Retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_on: error
          command: |
            gh release upload ${{ github.ref_name }} artifacts/release-ubuntu-latest/*.AppImage \
              --clobber \
              --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Upload Linux DEB Asset with Retry
        uses: nick-fields/retry@v3
        with:
          timeout_minutes: 10
          max_attempts: 5
          retry_on: error
          command: |
            gh release upload ${{ github.ref_name }} artifacts/release-ubuntu-latest/*.deb \
              --clobber \
              --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

